<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0">
    <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">
    <link rel="stylesheet" href="/style/rubik.css">
    <link rel="stylesheet" href="/style/quicksand.css">
    <link rel="stylesheet" href="/style/style.css">
    <script src="/js/sweetalert2.js"></script>
    <script src="/js/qrcode.min.js"></script>
    <title>Emmet Drop - File transfer app</title>
</head>

<body>
    <div class="menu-button"><span class="icon menu-icon"></span></div>
    <div class="curtain"></div>
    <div class="menu">
        <div class="file-history">
            <div class="file-history-header"><span class="icon history-icon"></span>Files history</div>
            <div class="file-list"></div>
        </div>
    </div>
    <div class="app">
        <div class="app-header">Emmet Drop</div>
        <div class="link-related">
            <div class="qr link-related-item">
                <div class="qr-header">Scan QR</div>
                <div class="qr-code"></div>
            </div>
            <div class="separator">or</div>
            <div class="sharelink link-related-item">
                <div class="sharelink-header">Link to share</div>
                <div class="link-wrapper">
                    <input id="link" class="link" type="text" value="" readonly>
                    <button class="link-button">Copy Link<span class="icon copy-icon"></span></button>
                </div>
            </div>
        </div>
        <div class="devices-wrapper">
            <div class="devices">
                <div class="devices-header">Available devices</div>
                <div class="device-list"></div>
            </div>
            <div class="devices discovered-devices" style="display: none;">
                <div class="devices-header">Discovered devices</div>
                <div class="device-list discovered-list"></div>
                <div class="discovered-device-list"></div>
            </div>
        </div>
        <input type="file" id="FILE" hidden>
        <div class="upload-widgets">
            <button class="upload-button">Choose File</button>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let devices = document.getElementsByClassName('device');
        let copyLinkButton = document.getElementsByClassName('link-button')[0];
        let copyLinkTimer;

        let checkMode = false;
        let pressDuration;
        //Check duration for press on device to go to check mode
        let checkDuration = 1000;

        let checkedList = []; //Checked devices list

        AssignDeviceListeners();

        //Turn off checkmode
        document.addEventListener("click", (e) => {
            if (checkMode && (e.target.className != "device" && e.target.tagName != "BUTTON" && e.target.tagName != "INPUT")) {
                checkMode = false;
                Array.from(devices).forEach((device) => {
                    device.removeChild(device.childNodes[0]);
                    checkedList = [];
                })
            }
        });

        copyLinkButton.addEventListener('click', CopyLink);

        function CopyLink(e) {
            clearTimeout(copyLinkTimer);

            //Copy link to clipboard
            var copyText = document.getElementById("link");

            copyText.select();
            copyText.setSelectionRange(0, 99999);

            document.execCommand("copy");

            window.getSelection().removeAllRanges();

            e.target.classList.add("checked");
            if (e.target.innerHTML != '<span class="icon check-bold-icon"></span>')
                e.target.innerHTML = '<span class="icon check-bold-icon"></span>';

            copyLinkTimer = setTimeout(() => {
                // e.target.style.transition = 'background-color color ease-in-out 0.2s';
                // e.target.style.color = 'black';
                // e.target.style.backgroundColor = 'buttonface';
                // e.target.style.border = '1px solid rgb(184, 184, 184)';
                // e.target.style.padding = '13px';
                e.target.classList.remove("checked");
                e.target.innerHTML = 'Copy Link<span class="icon copy-icon"></span>';
            }, 2500)
        }

        function AssignDeviceListeners() {
            //Check press
            Array.from(devices).forEach((e) => {
                CheckDivPressDuration(e);
            })

            //Set multiple choices
            Array.from(devices).forEach((e) => {
                e.addEventListener('click', CheckDevice);
            })
        }

        function CheckDivPressDuration(divElement) {
            let pressStartTime;
            let pressIntervalId;

            function HandleMouseDown() {
                pressStartTime = Date.now();
                pressIntervalId = setInterval(CheckPressDuration, 100);
            }

            function HandleMouseUp(e) {
                pressDuration = Date.now() - pressStartTime;
                clearInterval(pressIntervalId);
                pressStartTime = undefined;
            }

            function ResetDuration() {
                clearInterval(pressIntervalId);
                pressStartTime = undefined;
            }

            function CheckPressDuration() {
                if (pressStartTime) {
                    const pressDuration = Date.now() - pressStartTime;
                    if (pressDuration >= checkDuration) {
                        if (!checkMode) {
                            Array.from(devices).forEach((e) => {
                                let checkbox = document.createElement("span");
                                checkbox.className = 'icon checkbox-icon';
                                checkbox.style.backgroundImage = "url(/icons/checkbox-blank-outline.svg)";
                                e.prepend(checkbox);
                            })
                            checkMode = true;
                        }
                    }
                }
            }

            divElement.addEventListener("mouseleave", ResetDuration);
            divElement.addEventListener("mousedown", HandleMouseDown);
            divElement.addEventListener("touchstart", HandleMouseDown);
            divElement.addEventListener("mouseup", HandleMouseUp);
            divElement.addEventListener("touchend", HandleMouseUp);
        }

        function CheckDevice(e) {
            if (checkMode && pressDuration < checkDuration) {
                if (!checkedList.includes(e.target.id)) {
                    e.target.childNodes[0].style.backgroundImage = "url(/icons/checkbox-marked.svg)";
                    checkedList.push(e.target.id);
                }
                else {
                    e.target.childNodes[0].style.backgroundImage = "url(/icons/checkbox-blank-outline.svg)";
                    checkedList.splice(checkedList.indexOf(e.target.id), 1);
                }
            }
        }

        //Menu
        let isMenuOpen = true;
        document.getElementsByClassName("curtain")[0].style.display = "none";
        document.getElementsByClassName("menu")[0].style.right = "-" + document.getElementsByClassName("menu")[0].scrollWidth + "px";

        document.getElementsByClassName('menu-button')[0].addEventListener('click', () => {
            OpenMenu();
        })

        document.getElementsByClassName('curtain')[0].addEventListener('click', () => {
            CloseMenu();
        })

        window.addEventListener('resize', () => {
            if (!isMenuOpen)
                document.getElementsByClassName("menu")[0].style.right = "-" + (document.getElementsByClassName("menu")[0].scrollWidth + 10) + "px";
        })

        function OpenMenu() {
            isMenuOpen = true;
            document.getElementsByClassName("curtain")[0].style.display = "block";
            document.getElementsByClassName("menu")[0].style.opacity = "1";
            document.getElementsByClassName("menu")[0].style.transition = "all ease-in-out 0.2s";
            document.getElementsByClassName("menu")[0].style.right = "0px";
            setTimeout(() => {
                document.getElementsByClassName("menu")[0].style.transition = "none";
                document.getElementsByClassName("curtain")[0].style.transition = "none";
            }, 250)
        }

        function CloseMenu() {
            if (isMenuOpen) {
                document.getElementsByClassName("menu")[0].style.transition = "all ease-in-out 0.2s";
                document.getElementsByClassName("curtain")[0].style.transition = "all ease-in-out 0.2s";
                document.getElementsByClassName("curtain")[0].style.display = "none";
                document.getElementsByClassName("menu")[0].style.right = "-" + (document.getElementsByClassName("menu")[0].scrollWidth + 10) + "px";
                setTimeout(() => {
                    document.getElementsByClassName("menu")[0].style.transition = "none";
                }, 250)
                isMenuOpen = false;
            }
        }

        //Upload file
        let files = null;
        let canUpload = false;
        let uploadButton = document.getElementsByClassName("upload-button")[0];
        let fileInput = document.getElementById('FILE');

        uploadButton.addEventListener('click', () => {
            if (canUpload) {
                //Send file to chosen users
                Upload(files);
            }
            else
                fileInput.click();
        })

        fileInput.addEventListener('change', (e) => {
            files = fileInput.files;

            if (files != null) {
                canUpload = true;
                document.getElementsByClassName("app")[0].insertBefore(PresentFile(files[0].name, files[0].size), document.getElementsByClassName("upload-widgets")[0]);
                uploadButton.innerHTML = "Send file";
            }
        })

        function PresentFile(name, size, isHistory = false, sent = null) {
            //Main file element wrapper
            let fileElementWrapper = document.createElement('div');
            fileElementWrapper.className = 'file-wrapper';

            //Main file element
            let fileElement = document.createElement('div');
            fileElement.className = isHistory ? 'file list-file' : 'file';

            //File icon
            let fileIcon = document.createElement('div');
            fileIcon.className = 'file-icon';
            let icon = document.createElement('span');
            icon.className = 'file-outline-icon';

            //File info
            let fileInfo = document.createElement('div');
            fileInfo.className = 'file-info';

            let fileName = document.createElement('div');
            fileName.className = "file-name";
            if (name.length > 25) {
                let tempName = name.slice(0, 25) + "...";
                fileName.innerHTML = tempName;
            }
            else
                fileName.innerHTML = name;

            let fileSize = document.createElement('div');
            fileSize.className = 'file-size';
            fileSize.innerHTML = FormatBytes(size);

            //Icon for identyfing was file downloaded or sent
            let fileDownloadElement = document.createElement('div');
            if (isHistory && sent != null) {
                fileDownloadElement.className = 'file-download';
                fileDownloadElement.innerHTML = sent == true ? '<object class="status-icon" data="/icons/upload.svg" width="35"></object>' : '<object class="status-icon" data="/icons/download.svg" width="35"></object>';
            }

            let closeButton = document.createElement('span');
            closeButton.className = 'close-box-icon';

            closeButton.addEventListener('click', () => {
                canUpload = false;
                fileInput.value = '';
                uploadButton.innerHTML = 'Choose file';
                document.getElementsByClassName('file-wrapper')[0].remove();
            })

            //Build file element
            fileIcon.appendChild(icon);
            fileInfo.appendChild(fileName);
            fileInfo.appendChild(fileSize);

            fileElement.appendChild(fileIcon);
            fileElement.appendChild(fileInfo);

            if (sent != null)
                fileElement.appendChild(fileDownloadElement);

            if (!isHistory) {
                fileElementWrapper.appendChild(fileElement);
                fileElementWrapper.appendChild(closeButton);
                return fileElementWrapper;
            }

            return fileElement;
        }

        function FormatBytes(bytes) {
            const units = ['bytes', 'KB', 'MB', 'GB', 'TB'];
            let size = bytes;
            let unitIndex = 0;

            while (size >= 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
            }

            return `${size.toFixed(2)} ${units[unitIndex]}`;
        }
    </script>
    <script>
        const socket = io();

        let roomId = "<%=roomId%>";

        let link = document.getElementsByClassName('link')[0];
        let deviceList = document.getElementsByClassName('device-list')[0];
        let discoveredDevices = document.getElementsByClassName('discovered-devices')[0];
        let discoveredDeviceList = document.getElementsByClassName('discovered-device-list')[0];
        let fileHistoryList = document.getElementsByClassName('file-list')[0];

        //If roomId hasn't been passed it means you are creating the room
        if (roomId.length < 8)
            socket.emit('createRoom');
        else
            socket.emit('joinRoom', { roomId: roomId });

        socket.on('createRoomCallback', (msg) => {
            window.history.replaceState(null, null, "/c/" + msg.roomId); //Change url only visually in browser
            link.value = window.location.href;

            GenerateQrCode()
        })

        socket.on('joinRoomCallback', (msg) => {
            let socketsInRoom = msg.socketsInRoom;

            link.value = window.location.href;

            GenerateQrCode();

            deviceList.innerHTML = '';
            Array.from(socketsInRoom).forEach((socketId) => {
                if (socketId != socket.id)
                    deviceList.appendChild(PresentDevice(socketId, 'web'));
            })
            AssignDeviceListeners();
        })

        socket.on('discoverCallback', (msg) => {
            let discovered = msg.discovered;

            if (discovered.length == [])
                discoveredDevices.style.display = 'none';
            else
                discoveredDevices.style.display = 'block';

            discoveredDeviceList.innerHTML = '';

            Array.from(discovered).forEach((socketId) => {
                if (socketId != socket.id)
                    discoveredDeviceList.appendChild(PresentDevice(socketId, 'wifi'));
            })
            AssignDeviceListeners();
        })


        socket.on('receiveFile', (msg) => {
            console.log('received');
            AddFileToHistory(msg, false);
            ShowNewFileAlert(msg)
        })

        function GenerateQrCode() {
            let qrCode = document.getElementsByClassName("qr-code")[0];
            qrCode.innerHTML = ""; //Clear qrcode
            var code = new QRCode(qrCode, { //Generate qrcode
                text: window.location.href,
                width: 128,
                height: 128,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H,
            });
        }

        function Upload(files) {
            let file = { file: files[0], name: files[0].name, size: files[0].size, deviceList: checkedList };

            socket.emit("upload", file);

            AddFileToHistory(file, true);
        }

        function AddFileToHistory(file, sent) {
            const blob = new Blob([file.file]);
            const url = URL.createObjectURL(blob);

            let listFileElement = PresentFile(file.name, file.size, true, sent);

            listFileElement.addEventListener('click', () => {
                var downloadLink = document.createElement("a");
                downloadLink.href = url;
                downloadLink.download = file.name;

                downloadLink.click();
            })

            fileHistoryList.appendChild(listFileElement)
        }

        function ShowNewFileAlert(file) {
            const blob = new Blob([file.file]);
            const url = URL.createObjectURL(blob);
            Swal.fire({
                title: 'New file!',
                text: 'Do you want to download ' + file.name + ' (' + FormatBytes(file.size) + ')?',
                icon: 'info',
                confirmButtonText: 'Download',
                cancelButtonText: 'Cancel',
                showCancelButton: true
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Downloaded!', '', 'success')
                    var downloadLink = document.createElement("a");
                    downloadLink.href = url;
                    downloadLink.download = file.name;

                    downloadLink.click();
                }
            })
        }

        function PresentDevice(socketId, icon) {
            let deviceElement = document.createElement('div');
            deviceElement.className = 'device';
            deviceElement.id = socketId;

            let iconElement = document.createElement('span');
            iconElement.className = `${icon}-icon`;
            iconElement.style.backgroundImage = `url(/icons/${icon}.svg)`;

            deviceElement.appendChild(iconElement);
            deviceElement.innerHTML += socketId;

            return deviceElement;
        }
    </script>
</body>

</html>